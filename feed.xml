<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://marksimpson82.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://marksimpson82.github.io/blog/" rel="alternate" type="text/html" /><updated>2021-05-03T20:04:40+00:00</updated><id>https://marksimpson82.github.io/blog/feed.xml</id><title type="html">Mark’s Devblog</title><subtitle>Thoughts about development. Oh and games stuff, too.</subtitle><author><name>Mark Simpson</name></author><entry><title type="html">The fundamentals of unit testing: Setup structure</title><link href="https://marksimpson82.github.io/blog/2020/08/10/the-fundamentals-of-automated-testing-setup-structure.html" rel="alternate" type="text/html" title="The fundamentals of unit testing: Setup structure" /><published>2020-08-10T00:00:00+00:00</published><updated>2020-08-10T00:00:00+00:00</updated><id>https://marksimpson82.github.io/blog/2020/08/10/the-fundamentals-of-automated-testing-setup-structure</id><content type="html" xml:base="https://marksimpson82.github.io/blog/2020/08/10/the-fundamentals-of-automated-testing-setup-structure.html">&lt;p&gt;This post is &lt;a href=&quot;/blog/2012/10/24/the-fundamentals-of-automated-testing-series.html&quot;&gt;part of a series&lt;/a&gt; on unit testing.&lt;/p&gt;

&lt;h2 id=&quot;the-importance-of-test-setup-structure&quot;&gt;The importance of test setup structure&lt;/h2&gt;
&lt;p&gt;I’ve already blogged about the importance of well-structured test setup code in this series (have a look at
&lt;a href=&quot;/blog/2014/08/07/the-fundamentals-of-unit-testing-arrange-act-assert.html&quot;&gt;Arrange, Act &amp;amp; Assert&lt;/a&gt; and 
&lt;a href=&quot;/blog/2012/11/11/the-fundamentals-of-automated-testing-use-factories.html&quot;&gt;Use Factories&lt;/a&gt;). However, I’ve yet to 
touch upon the pros &amp;amp; cons of using the built-in framework &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teardown&lt;/code&gt; methods.&lt;/p&gt;

&lt;h3 id=&quot;setup--teardown-methods&quot;&gt;Setup &amp;amp; teardown methods?&lt;/h3&gt;
&lt;p&gt;If you’ve used well-known testing frameworks, you’ll likely be familiar with some variant of these. They’re optional 
methods that the framework runs for you automatically before each test is executed (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt;) and after each test is 
executed (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teardown&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Here’s a few example links:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://docs.python.org/3/library/unittest.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unittest&lt;/code&gt;&lt;/a&gt; – 
(&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp&quot;&gt;setup&lt;/a&gt; / 
&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown&quot;&gt;teardown&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;C#: &lt;a href=&quot;https://docs.nunit.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NUnit&lt;/code&gt;&lt;/a&gt; – 
(&lt;a href=&quot;https://docs.nunit.org/articles/nunit/writing-tests/setup-teardown/index.html&quot;&gt;SetUp / TearDown&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;C++: &lt;a href=&quot;https://chromium.googlesource.com/external/github.com/google/googletest/+/HEAD/googletest/docs/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;googletest&lt;/code&gt;&lt;/a&gt; 
– (&lt;a href=&quot;https://chromium.googlesource.com/external/github.com/google/googletest/+/HEAD/googletest/docs/faq.md#ctorvssetup&quot;&gt;SetUp / TearDown&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;: It should be noted that many test frameworks define additional methods that might execute when a 
test &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixture&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;) is created/destroyed, but we’ll just focus on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teardown&lt;/code&gt; for now.&lt;/p&gt;

&lt;h3 id=&quot;batteries-included&quot;&gt;Batteries included?&lt;/h3&gt;
&lt;p&gt;Because these conventional methods are included in the framework, they often become our default way of doing things.&lt;/p&gt;

&lt;p&gt;However, I’ve never much cared for using them and I’ll do my best to explain why.&lt;/p&gt;

&lt;h2 id=&quot;a-contrived-example&quot;&gt;A contrived example&lt;/h2&gt;
&lt;p&gt;Before I get going, here’s some example C# test code that uses NUnit’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetUp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TearDown&lt;/code&gt; methods. We use NUnit’s 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetUp&lt;/code&gt; method to initialise the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BankAccount&lt;/code&gt; with no funds available. The tests then make use of the 
already-initialised &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BankAccount&lt;/code&gt; instance to test functionality related to depositing funds.&lt;/p&gt;

&lt;p&gt;There’s also some iffy-looking static state relating to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationService&lt;/code&gt;, and we’re leaning on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetUp&lt;/code&gt; &amp;amp;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TearDown&lt;/code&gt; methods to make sure the instance is in a good state.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BankAccountTests&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthenticationService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms_authService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthenticationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BankAccount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InitialBalance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m_account&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BankAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InitialBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// let's imagine the account must be marked as accepting deposits&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// before we can proceed due to some security features&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AcceptDeposits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;ms_authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ms_authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DepositingFundsIncreasesAccountBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DepositFunds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FundsAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WithdrawingFundsThrowsWhenAccountBalanceIsZero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InsufficientFundsException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WithdrawFunds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s multiple things I don’t like about this.&lt;/p&gt;

&lt;h3 id=&quot;problem-the-code-jumps-around-a-lot&quot;&gt;Problem: the code jumps around a lot.&lt;/h3&gt;
&lt;p&gt;Because framework methods are ‘automagic’ (they’re similar to
&lt;a href=&quot;http://wiki.c2.com/?TemplateMethodPattern&quot;&gt;Template Methods&lt;/a&gt;, but are often called via reflection), the code no longer 
reads in a straight line – it jumps around.&lt;/p&gt;

&lt;p&gt;Where do you naturally begin reading the code?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do you start from an individual test?&lt;/li&gt;
  &lt;li&gt;Do you start from the arbitrarily named method that has the [&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Setup&lt;/code&gt;] attribute above it?&lt;/li&gt;
  &lt;li&gt;Hmm, what if the test fixture also uses a 
&lt;a href=&quot;https://docs.nunit.org/articles/nunit/writing-tests/attributes/onetimesetup.html&quot;&gt;[&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OneTimeSetup&lt;/code&gt;]&lt;/a&gt; method, too?&lt;/li&gt;
  &lt;li&gt;What if the fixture is derived from a base fixture that has some (or all) of these methods?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It quickly becomes the testing equivalent of voodoo, and the only way to be 100% sure is to step through the code in a 
debugger. This is &lt;strong&gt;not&lt;/strong&gt; what we want in test code. While test code can be verbose at times, it should be as simple as 
possible.&lt;/p&gt;

&lt;p&gt;If you need to share code, follow the same practices as when writing production code. &lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;Prefer composition over 
inheritance&lt;/a&gt; unless there’s a strong reason to do otherwise.&lt;/p&gt;

&lt;h3 id=&quot;problem-setupteardown-code-quickly-becomes-misleading&quot;&gt;Problem: setup/teardown code quickly becomes misleading&lt;/h3&gt;
&lt;p&gt;Adding new tests to an existing fixture is an everyday occurrence.&lt;/p&gt;

&lt;p&gt;One day we decide to cover off a potential edge-case by adding a test that ensures a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BankAccount&lt;/code&gt; with a positive 
balance will correctly receive a deposit. Easy, right? We add the following test:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DepositingFundsWhenAccountBalanceIsAboveZeroIncreasesBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Arrange&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InitialBalance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;m_account&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BankAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InitialBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Act&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;m_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DepositFunds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
  &lt;span class=&quot;c1&quot;&gt;// Assert&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FundsAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2000.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a wrinkle, though: we realise that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Setup]&lt;/code&gt; method has already created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BankAccount&lt;/code&gt; with a balance of 
zero, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[SetUp]&lt;/code&gt; method &lt;em&gt;always&lt;/em&gt; runs. That’s no good for our test case, though. We work around it by simply 
re-creating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BankAccount&lt;/code&gt;. Unfortunately, we forgot to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AcceptDeposits()&lt;/code&gt;, so the test fails.&lt;/p&gt;

&lt;p&gt;Even in a simple example, the moment the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; code ceases to apply to &lt;em&gt;all&lt;/em&gt; cases in the test fixture, things start 
to get… muddy.&lt;/p&gt;

&lt;p&gt;At best, you’ll apply &lt;em&gt;some&lt;/em&gt; setup logic in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; method only to finish it off in your specific test methods. 
This is a type of two-phase initialisation. It’s confusing, especially when the initialisation code jumps around.&lt;/p&gt;

&lt;p&gt;At worst, you’ll do misleading work in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; only to throw it away, or even introduce bugs in the test code. This 
wastes time and will confuse your fellow programmers.&lt;/p&gt;

&lt;p&gt;Another equally questionable solution is to split the fixture in two. We then group the sets of tests into the 
appropriate fixture depending on their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; needs. This is very inflexible form of coupling.&lt;/p&gt;

&lt;h3 id=&quot;problem-setupteardown-code-can-hide-bad-habits&quot;&gt;Problem: setup/teardown code can hide bad habits&lt;/h3&gt;
&lt;p&gt;In the example above, we’re able to work-around the problems caused by static state by performing bookkeeping in our
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teardown&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;It’s also quite common to see developers use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teardown&lt;/code&gt; methods to skirt around the fact that they’re 
&lt;a href=&quot;/blog/2012/11/02/the-fundamentals-of-automated-testing-atomic.html&quot;&gt;hitting the file system&lt;/a&gt; in a unit test (at 
which point it’s not really a unit test: it’ll run slower &amp;amp; be more prone to breakages).&lt;/p&gt;

&lt;p&gt;Tests are consumers of your API, and if you’re having to perform awkward state management via the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; &amp;amp; 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teardown&lt;/code&gt; to keep things rolling, it’s often a sign that the class under test is not terribly easy to use.&lt;/p&gt;

&lt;h3 id=&quot;solutions&quot;&gt;Solutions&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2012/11/11/the-fundamentals-of-automated-testing-use-factories.html&quot;&gt;Use Factories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.c2.com/?ObjectMother&quot;&gt;Object Mother&lt;/a&gt; (read the caveats, though)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.natpryce.com/articles/000714.html&quot;&gt;Test Data Builders&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of these alternatives is relatively simple, can be called directly by a test method and offers some level of 
configurability. Factory methods are the easiest to get going with.&lt;/p&gt;

&lt;p&gt;Want a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BankAccount&lt;/code&gt; pre-configured with a set balance? No problem! Simply add a method that initialises and returns 
one. Every test is responsible for its own setup. Tests are no longer coupled to a one-size-fits-all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Object Mothers &amp;amp; Test Data Builders require a bit more up-front investment, but they pay it back in spades via providing 
canned objects with sensible defaults in a variety configurations.&lt;/p&gt;

&lt;p&gt;Let’s re-write our example tests to incorporate some of these things:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BankAccountTests&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BankAccount&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateBankAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;openingBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// we've refactored the production code to get rid of the &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// static dependency, so AuthenticationService has gone. &lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BankAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openingBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AcceptDeposits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DepositingFundsIncreasesAccountBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateBankAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DepositFunds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FundsAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WithdrawingFundsThrowsWhenAccountBalanceIsZero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateBankAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InsufficientFundsException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WithdrawFunds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; 
    &lt;span class=&quot;nf&quot;&gt;DepositingFundsWhenAccountBalanceIsAboveZeroIncreasesBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Arrange&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpeningBalance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateBankAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpeningBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Act&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DepositFunds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Assert&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FundsAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2000.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I personally think the refactored test code is a lot easier to understand and extend.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each test reads linearly (no more ping-ponging around to understand the execution flow – we’re now dealing with a 
handful of simple factory methods).&lt;/li&gt;
  &lt;li&gt;Each test can piggy-back on the default setup via a factory method, or have its own specific factory method.&lt;/li&gt;
  &lt;li&gt;We’re no longer using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teardown&lt;/code&gt; methods as a crutch for managing dodgy static dependencies.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mark Simpson</name></author><category term="fundamentals of unit testing" /><category term="testing" /><category term="tips" /><summary type="html">This post is part of a series on unit testing.</summary></entry><entry><title type="html">The fundamentals of unit testing: Data-driven tests</title><link href="https://marksimpson82.github.io/blog/2020/08/05/the-fundamentals-of-automated-testing-data-driven-tests.html" rel="alternate" type="text/html" title="The fundamentals of unit testing: Data-driven tests" /><published>2020-08-05T00:00:00+00:00</published><updated>2020-08-05T00:00:00+00:00</updated><id>https://marksimpson82.github.io/blog/2020/08/05/the-fundamentals-of-automated-testing-data-driven-tests</id><content type="html" xml:base="https://marksimpson82.github.io/blog/2020/08/05/the-fundamentals-of-automated-testing-data-driven-tests.html">&lt;p&gt;This post is &lt;a href=&quot;/blog/2012/10/24/the-fundamentals-of-automated-testing-series.html&quot;&gt;part of a series&lt;/a&gt; on unit testing.&lt;/p&gt;

&lt;h2 id=&quot;dont-repeat-yourself-dry&quot;&gt;Don’t Repeat Yourself (DRY)&lt;/h2&gt;
&lt;p&gt;If you’ve been programming for more than a few years, you’ve mostly likely heard the phrase &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;&lt;strong&gt;D&lt;/strong&gt;on’t &lt;strong&gt;R&lt;/strong&gt;epeat 
&lt;strong&gt;Y&lt;/strong&gt;ourself&lt;/a&gt; (DRY) and have applied it to your code.&lt;/p&gt;

&lt;p&gt;The main thrust of DRY is avoiding duplication across code, data, abstractions etc. The benefits include increased code 
clarity, brevity and the creation of a single source of truth (it should be noted that blindly applying the DRY 
principle can be harmful, but that’s for another day).&lt;/p&gt;

&lt;h2 id=&quot;dry-fail-in-test-code&quot;&gt;DRY fail in test code&lt;/h2&gt;
&lt;p&gt;So, that’s DRY in production code. Seems straightforward.&lt;/p&gt;

&lt;p&gt;If you’ve been writing automated tests for a while, you’ve also probably noticed that it’s very easy to repeat ourselves 
when writing tests, particularly when we wish to vary the test data while retaining the same test logic.&lt;/p&gt;

&lt;h3 id=&quot;a-simple-example&quot;&gt;A simple example&lt;/h3&gt;
&lt;p&gt;Let’s take a very simple example: We’re going to test the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt; addition operator:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AdditionOperatorTests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;    
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_add_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_add_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_add_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;problems-with-this-approach&quot;&gt;Problems with this approach&lt;/h4&gt;
&lt;p&gt;If you look at this python example, we can say a few things:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The test names aren’t particularly descriptive – it feels like we’re fighting to come up with a useful name, but 
can’t.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The test &lt;em&gt;logic&lt;/em&gt; (the assert in this case) is identical across all three tests – we’ve violated the DRY principle.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The bulk of the test lines are boilerplate/noise. All we’re really interested in is varying the data here.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more complicated test cases (especially those that have more intricate 
&lt;a href=&quot;/blog/2014/08/07/the-fundamentals-of-unit-testing-arrange-act-assert.html&quot;&gt;Arrange, Act &amp;amp; Assert&lt;/a&gt;) logic, the
duplication soon gets out of control.&lt;/p&gt;

&lt;h3 id=&quot;a-solution-data-driven-testing&quot;&gt;A solution: data-driven testing&lt;/h3&gt;
&lt;p&gt;Data-driven testing is much what it sounds like – the test logic is written once, and we data-drive the test by 
passing in multiple values.&lt;/p&gt;

&lt;p&gt;Most languages have testing frameworks that support data-driven testing. For example, Python has the 
&lt;a href=&quot;https://ddt.readthedocs.io/en/latest/example.html&quot;&gt;ddt&lt;/a&gt; package. Installing it is as simple as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install ddt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can now re-write our addition operator tests to use a single method and multiple test data inputs:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unittest&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ddt&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ddt&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AdditionOperatorTests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It works via three special decorators:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ddt&lt;/code&gt;: marks the TestCase-derived class as being data-driven.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@data&lt;/code&gt;: contains the test data values.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@unpack&lt;/code&gt;: (optional) automatically unpacks the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@data&lt;/code&gt; contents &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt; method args (if you omit this, your test will 
receive a single argument and you must unpack the contents yourself).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h4&gt;
&lt;p&gt;Let’s revisit the three problems we previously talked about:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The awkward naming problem has disappeared.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The test &lt;em&gt;logic&lt;/em&gt; is defined once. It’s DRY.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Even in this artificially simple example, the number of lines in the test scales with the amount of test &lt;em&gt;data&lt;/em&gt;. 
If we want to add another test, we probably just need to add a single line.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Mark Simpson</name></author><category term="fundamentals of unit testing" /><category term="testing" /><category term="tips" /><summary type="html">This post is part of a series on unit testing.</summary></entry><entry><title type="html">Goodbye Wordpress, Hello Jekyll and Github Pages</title><link href="https://marksimpson82.github.io/blog/2020/08/02/goodbye-wordpress-hello-jekyll-and-github-pages.html" rel="alternate" type="text/html" title="Goodbye Wordpress, Hello Jekyll and Github Pages" /><published>2020-08-02T00:00:00+00:00</published><updated>2020-08-02T00:00:00+00:00</updated><id>https://marksimpson82.github.io/blog/2020/08/02/goodbye-wordpress-hello-jekyll-and-github-pages</id><content type="html" xml:base="https://marksimpson82.github.io/blog/2020/08/02/goodbye-wordpress-hello-jekyll-and-github-pages.html">&lt;p&gt;I’ve been using Wordpress with &lt;a href=&quot;https://34sp.com&quot;&gt;34sp.com&lt;/a&gt; hosting since the late noughties, and it’s time for a 
change.&lt;/p&gt;

&lt;h2 id=&quot;reasons-for-switching&quot;&gt;Reasons for switching&lt;/h2&gt;
&lt;p&gt;I’ve got a few reasons for making the switch:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Wordpress is a permanent security and maintenance risk.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Authoring posts using markdown is a lot more pleasant &amp;amp; predictable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://34sp.com&quot;&gt;34sp.com&lt;/a&gt; sadly withdrew their personal hosting product and forcibly migrated me to a professional one.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, it’s a clunk dev experience and fairly expensive.&lt;/p&gt;

&lt;h2 id=&quot;making-the-switch&quot;&gt;Making the switch&lt;/h2&gt;
&lt;p&gt;As with many web topics, it wasn’t particularly difficult, but did involve a certain amount of head-scratching when 
mashing the various parts together.&lt;/p&gt;

&lt;h3 id=&quot;create-github-repos--enable-github-pages&quot;&gt;Create github repo(s) &amp;amp; enable github pages&lt;/h3&gt;
&lt;p&gt;If you’re new to &lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt; like me, you’ll possibly get confused by the fact that there 
are two types of github pages sites: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;organisation&lt;/code&gt; sites &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project&lt;/code&gt; sites.&lt;/p&gt;

&lt;p&gt;Organisation sites are limited to one per user or organisation, but you can have multiple project sites.&lt;/p&gt;

&lt;p&gt;I created two repos (caveat: I’m in ‘just-make-it-work-mode’, so exercise your own judgement):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/marksimpson82/marksimpson82.github.io&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;myusername&amp;gt;.github.io&lt;/code&gt;&lt;/a&gt; for my (2007!) root website 
content&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/marksimpson82/blog&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog&lt;/code&gt;&lt;/a&gt; for my blog&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The former will serve content for &lt;a href=&quot;https://defragdev.com&quot;&gt;https://defragdev.com&lt;/a&gt; &amp;amp; the latter for 
&lt;a href=&quot;https://defragdev.com/blog/&quot;&gt;https://defragdev.com/blog/&lt;/a&gt;. For now, we’ll leave them being served from 
&lt;a href=&quot;https://github.io&quot;&gt;github.io&lt;/a&gt;, though.&lt;/p&gt;

&lt;p&gt;I found it a little confusing, but there’s a convention whereby if you have a user/org repo with github pages enabled, 
further repos are served via subdirectory url schemes (i.e. hitting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yourdomain.com/X&lt;/code&gt; will map to the contents held in 
repo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;As blog used to be served from &lt;a href=&quot;https://defragdev.com/blog&quot;&gt;https://defragdev.com/blog&lt;/a&gt;, this worked fine for me.&lt;/p&gt;

&lt;h3 id=&quot;export-the-data-from-wordpress&quot;&gt;Export the data from wordpress&lt;/h3&gt;
&lt;p&gt;I followed a guide from &lt;a href=&quot;https://talk.hyvor.com/&quot;&gt;https://talk.hyvor.com/blog/migrate-from-wordpress-to-jekyll/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The gist:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://wordpress.org/plugins/jekyll-exporter/&quot;&gt;jekyll-exporter&lt;/a&gt; on your wordpress site&lt;/li&gt;
  &lt;li&gt;Enable it&lt;/li&gt;
  &lt;li&gt;Export the data &amp;amp; download it (it may take a few minutes to generate the .zip)&lt;/li&gt;
  &lt;li&gt;Disable it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will give you the skeleton for your new jekyll-based site.&lt;/p&gt;

&lt;h3 id=&quot;install-jekyll&quot;&gt;Install jekyll&lt;/h3&gt;
&lt;p&gt;I tried to install it using WSL and it didn’t go very well(tm). Eventually got it working on Windows 10 directly, but I 
can’t remember the exact steps I took. If you’re using Mac or Linux, you’ll likely have an easier time.&lt;/p&gt;

&lt;p&gt;You can try to build the site via:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;fix-wordpress-ids-if-needed&quot;&gt;Fix wordpress ids (if needed)&lt;/h4&gt;
&lt;p&gt;If you’re like me and your ancient wordpress scheme used integer post ids &amp;amp; query strings, then you’re in 
for a treat – it won’t work.&lt;/p&gt;

&lt;p&gt;E.g. an old URL might look something like: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://defragdev.com/blog/?p=50&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;… which generates Front Matter like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
id: 847
title: &quot;Nvidia + G-SYNC - Black screen when alt-tabbing&quot;
date: 2020-03-29T21:14:28+00:00
author: Mark Simpson
layout: single
guid: https://defragdev.com/blog/?p=847
permalink: /?p=847
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permalink&lt;/code&gt; doesn’t work, as it’s a query string (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; will fail with an obscure-looking error).&lt;/p&gt;

&lt;p&gt;If you have this problem, comment out all permalinks in your posts:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#permalink: /?p=847
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll come back to this later. If there’s nothing else jiggered, the site should now build &amp;amp; serve locally.&lt;/p&gt;

&lt;h3 id=&quot;choose-an-appropriate-url-scheme&quot;&gt;Choose an appropriate URL scheme&lt;/h3&gt;
&lt;p&gt;The default URL scheme seems pretty wordy to me, and will change the URL based on whether you add or remove categories 
or tags. While it does create a hierarchical navigation structure, I decided to jettison it for something simpler.&lt;/p&gt;

&lt;p&gt;To do this, edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permalink&lt;/code&gt; value in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; and change it to something more succinct, like:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;permalink: /:year/:month/:day/:title:output_ext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;set-up-the-minimal-mistakes-theme-optional&quot;&gt;Set up the &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;minimal mistakes&lt;/a&gt; theme (optional)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;minimal mistakes&lt;/a&gt; is a nice-looking theme, and was easy to configure.&lt;/p&gt;

&lt;h3 id=&quot;set-up-tagcategory-support-optional&quot;&gt;Set up tag/category support (optional)&lt;/h3&gt;
&lt;p&gt;If you want to enable browsing by tags and/or categories, you’ll need to do a bit more wrangling. This was the step that
probably caused me the most grief, as I couldn’t easily understand what was built into minimal mistakes vs. the plugins
it integrated with.&lt;/p&gt;

&lt;p&gt;You can either use something out-of-the-box (and potentially deal with some DRY-fail) or plump for a jekyll plugin.&lt;/p&gt;

&lt;p&gt;In the end, I settled on &lt;a href=&quot;https://github.com/jekyll/jekyll-archives&quot;&gt;jekyll-archives&lt;/a&gt;. However, there’s a caveat: 
&lt;a href=&quot;https://github.com/jekyll/jekyll-archives&quot;&gt;jekyll-archives&lt;/a&gt; is not directly supported by github pages.&lt;/p&gt;

&lt;p&gt;I.e. If you go down this route, you’ll need to handle building the site contents yourself. Fret not though, as it’s 
fairly easy and covered in the next point!&lt;/p&gt;

&lt;h3 id=&quot;set-up-github-workflows-to-build-the-site-optional&quot;&gt;Set up github workflows to build the site (optional)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you’re using plugins that are 100% compatible with github pages, you can skip this step. I’m using 
jekyll-archives, which is not supported.&lt;/p&gt;

&lt;p&gt;The official &lt;a href=&quot;https://jekyllrb.com/docs/continuous-integration/github-actions/#setting-up-the-action&quot;&gt;jekyll CI example&lt;/a&gt;
 was simple to follow.&lt;/p&gt;

&lt;p&gt;You’ll need to create a secret with public repo access as per the guide.&lt;/p&gt;

&lt;p&gt;For reference here’s my version of 
&lt;a href=&quot;https://github.com/marksimpson82/blog/blob/master/.github/workflows/github-pages.yml&quot;&gt;github-pages.yml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pushing to to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; should now trigger a site build.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gotcha&lt;/strong&gt;: If you’ve not set up github pages for the repo, &lt;em&gt;nothing will happen&lt;/em&gt;. You’ll see the github action is 
present, but it won’t do anything.&lt;/p&gt;

&lt;h3 id=&quot;set-up-a-redirection-scheme-optional&quot;&gt;Set up a redirection scheme (optional)&lt;/h3&gt;
&lt;p&gt;If you’re migrating from wordpress then you’ll want to keep your old URLs alive. There are various redirect plugins 
available for jekyll, so have a poke around. The front matter of each post should contain the old, exported URLs.&lt;/p&gt;

&lt;h4 id=&quot;the-happy-path&quot;&gt;The happy path&lt;/h4&gt;
&lt;p&gt;If your wordpress install was configured to use sensible URL schemes like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysite.com/blog/why-parsnips-are-great/&lt;/code&gt; then
you’ll have no problem – it’s just a case of editing the front matter for each post and inserting the redirects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you have more than a handful of posts, I’d recommend writing a one-shot script to handle this.&lt;/p&gt;

&lt;h4 id=&quot;the-sad-path-querystrings&quot;&gt;The sad path (?query=strings)&lt;/h4&gt;
&lt;p&gt;My blog was unfortunately using an ancient URL scheme featuring integer ids and query parameters (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/blog/?p=123&lt;/code&gt;) 
and this hobbles things somewhat.&lt;/p&gt;

&lt;p&gt;If you try to use a redirect plugin and configure it with something like 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/blog/?p=123 =&amp;gt; /2014-02-13/why-parsnips-are-great/&lt;/code&gt;, it won’t work (it’ll crash when attempting to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I went with a quick ‘n’ dirty solution yoinked from 
&lt;a href=&quot;https://github.com/danvk/danvk.github.io/commit/f99fa0d6ef808a2ba468587d3f7eab800d448f1e&quot;&gt;danvk&lt;/a&gt;. It’s a simple js file
that redirects via searching the current URL. It likely won’t work with bots etc. but it’ll do for now.&lt;/p&gt;

&lt;p&gt;To populate it, I did the following:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ri&lt;/span&gt; permalink _posts &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /c/temp/guids.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sample content:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts/2008-11-08-assertthatpostcontent-textdoesnotcontainhello-world.md:#permalink: /?p=3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I then wrote &lt;a href=&quot;https://gist.github.com/marksimpson82/fdc8f6915a6256391138fdc70a0a9a0b&quot;&gt;a one-shot python script&lt;/a&gt; to spit 
out the redirect line &amp;amp; pasted the lot into 
&lt;a href=&quot;https://github.com/marksimpson82/blog/blob/master/redirect.js&quot;&gt;redirect.js&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;set-up-a-custom-domain-optional&quot;&gt;Set up a custom domain (optional)&lt;/h3&gt;
&lt;p&gt;Up till now, we’ve been browsing to a github pages URL. It’s time to configure your custom domain (if you have one). 
I followed &lt;a href=&quot;https://medium.com/@hossainkhan/using-custom-domain-for-github-pages-86b303d3918a&quot;&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In your github repo, create:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A CNAME file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitHub Pages&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Custom Domain&lt;/code&gt;) (e.g. mine’s set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defragdev.com&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On your host configuration (e.g. google domains or whatever you’re using), create:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A records to point to the github pages IPs&lt;/li&gt;
  &lt;li&gt;A CNAME for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.yourdomain.com&lt;/code&gt;, if desired&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DNS records can take up to 24 hours to cycle, but in practice it took an hour for mine to come through.&lt;/p&gt;

&lt;h4 id=&quot;automagic-confusion&quot;&gt;Automagic confusion&lt;/h4&gt;
&lt;p&gt;I stumbled due to something I mentioned earlier: I have a github org/user repo for my root site that uses github pages. 
I couldn’t easily understand why &lt;a href=&quot;https://defragdev.com/blog&quot;&gt;https://defragdev.com/blog&lt;/a&gt; was magically being served 
without a CNAME being present.&lt;/p&gt;

&lt;p&gt;This is just a convention with github pages (read the start of this post).&lt;/p&gt;

&lt;p&gt;When I configured my &lt;a href=&quot;https://github.com/marksimpson82/marksimpson82.github.io&quot;&gt;user repo&lt;/a&gt; with a CNAME (pointing at 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defragdev.com&lt;/code&gt;), it indirectly means that project repos will be served as subdirectories – as such, my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog&lt;/code&gt; repo 
is automagically served when I browse to &lt;a href=&quot;https://defragdev.com/blog/&quot;&gt;https://defragdev.com/blog/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This may or may not be what you want. It’s perfect for me, but you may want to set up a subdomain of 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog.yourdomain.com&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;enforce-https-optional&quot;&gt;Enforce HTTPS (optional)&lt;/h3&gt;
&lt;p&gt;I don’t want to serve via HTTP, so I forced HTTPS. Check the box under:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitHub Pages&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enforce HTTPS&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;fix-up-various-content-problems&quot;&gt;Fix up various content problems&lt;/h3&gt;
&lt;p&gt;Since I’ve been running every major version of wordpress since ~2008, the defaults have changed a lot over that time. As
a consequence, the exported content is quite changeable.&lt;/p&gt;

&lt;p&gt;If you’ve written a lot of posts, you’re not going to have fun fixing up the content; in my own case it took about 4
hours to fix up my paltry 87 posts. The low number of posts and changeable formatting meant that it wasn’t worth 
automating, so I went with occasional scripts, grep &amp;amp; targeted manually editing.&lt;/p&gt;

&lt;p&gt;Some of the problems/fixes include:&lt;/p&gt;

&lt;h4 id=&quot;broken-internal-blog-links&quot;&gt;Broken internal blog links&lt;/h4&gt;
&lt;p&gt;While my hacky redirect solution worked, it’s obviously better if you can use the built-in Jekyll functionality to 
create internal links.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;: see &lt;a href=&quot;https://jekyllrb.com/docs/liquid/tags/#linking-to-posts&quot;&gt;Jekyll: linking to posts&lt;/a&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_url&lt;/code&gt; 
syntax is handy, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; will fail with an error message if you have a broken internal link.&lt;/p&gt;

&lt;h4 id=&quot;text-content-and-formatting-issues&quot;&gt;Text content and formatting issues&lt;/h4&gt;
&lt;p&gt;My blog’s content was all over the place and included a mixture of markdown, html etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;: manual editing&lt;/p&gt;

&lt;h4 id=&quot;code-snippets&quot;&gt;Code snippets&lt;/h4&gt;
&lt;p&gt;Code snippets were similarly in a mixture of formats, all of which won’t play nicely with markdown.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;: see &lt;a href=&quot;https://jekyllrb.com/docs/configuration/markdown/#redcarpet&quot;&gt;Jekyll: code snippets&lt;/a&gt; – this involved a lot of 
manual editing, but was a doddle compared to the bad old days of wordpress formatting.&lt;/p&gt;

&lt;h4 id=&quot;special-characters--entity-namesnumbers&quot;&gt;Special characters &amp;amp; entity names/numbers&lt;/h4&gt;
&lt;p&gt;These either hinder readability while editing posts (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;lt;&lt;/code&gt; aka &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;#60;&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;gt;&lt;/code&gt; aka &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;#62;&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;) and/or 
don’t render correctly in a browser (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; combined with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;nbsp&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If you have a lot of content, it’d probably be wise to ignore entity names/numbers that render correctly in the 
browser and focus on the legitimate content problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;: I fixed these problems via search/replace mostly – be careful as sometimes the context means that the entity 
names/numbers are required (or may require escaping or different quotes if removed).&lt;/p&gt;

&lt;h4 id=&quot;irrelevant-tags-like---more--&quot;&gt;Irrelevant tags like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;--more--&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;: Search &amp;amp; delete.&lt;/p&gt;</content><author><name>Mark Simpson</name></author><summary type="html">I’ve been using Wordpress with 34sp.com hosting since the late noughties, and it’s time for a change.</summary></entry><entry><title type="html">Nvidia + G-SYNC - Black screen when alt-tabbing</title><link href="https://marksimpson82.github.io/blog/2020/03/29/nvidia-g-sync-black-screen-when-alt-tabbing.html" rel="alternate" type="text/html" title="Nvidia + G-SYNC - Black screen when alt-tabbing" /><published>2020-03-29T21:14:28+00:00</published><updated>2020-03-29T21:14:28+00:00</updated><id>https://marksimpson82.github.io/blog/2020/03/29/nvidia-g-sync-black-screen-when-alt-tabbing</id><content type="html" xml:base="https://marksimpson82.github.io/blog/2020/03/29/nvidia-g-sync-black-screen-when-alt-tabbing.html">&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; It seems G-SYNC related. I fixed it by installing the monitor driver, then toggling G-SYNC on/off.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’ve had an irritating PC problem for a few months, hopefully this post helps folk with the same problem.&lt;/p&gt;

&lt;p&gt;When entering/exiting full-screen video or alt-tabbing out of a game, the screen would go black for a few seconds - it was pretty sluggish, too.&lt;/p&gt;

&lt;p&gt;It’s one of those issues where finding the right search terms took a while, and it tended to turn up irrelevant posts from years ago, or similar problems with solutions that no longer apply (e.g. “set X option in the driver” where X option no longer even exists).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My PC&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows 10 Home Premium, 64 bit&lt;/li&gt;
  &lt;li&gt;NVIDIA 1060 Ti 3GB (driver version: 442.59)&lt;/li&gt;
  &lt;li&gt;Benq XL2540&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, I installed the monitor driver for my XL2540 (I never install monitor drivers, but I needed to do this or the GSync option failed to show up in the Nvidia Control Panel).&lt;/p&gt;

&lt;p&gt;Then, I toggled G-Sync on, then back off. Detailed instructions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open Nvidia Control Panel:&lt;/li&gt;
  &lt;li&gt;Click “Display &amp;gt; Set up G-SYNC”&lt;/li&gt;
  &lt;li&gt;Under the “1. Apply the following changes” text&lt;/li&gt;
  &lt;li&gt;Check the box named, “Enable G-SYNC, G-SYNC Compatible”&lt;/li&gt;
  &lt;li&gt;Click “Apply” (the screen should go black, then confirm everything is OK)&lt;/li&gt;
  &lt;li&gt;Uncheck the same box (“Enable G-SYNC, G-SYNC Compatible”)&lt;/li&gt;
  &lt;li&gt;Click “Apply” and confirm once again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to Ethan Snider for his &lt;a href=&quot;https://www.youtube.com/watch?v=m0T0Oln6khk&amp;amp;lc=UgwnxpFEgo8lJnkTDHZ4AaABAg&quot;&gt;comment&lt;/a&gt; on a youtube video for pointing me in the right direction.&lt;/p&gt;</content><author><name>Mark Simpson</name></author><category term="nvidia" /><category term="g-sync" /><category term="black-screen" /><category term="bugs" /><category term="tips" /><summary type="html">tl;dr: It seems G-SYNC related. I fixed it by installing the monitor driver, then toggling G-SYNC on/off.</summary></entry><entry><title type="html">Jupyter Notebook to clean(ish) HTML</title><link href="https://marksimpson82.github.io/blog/2019/10/17/jupyter-notebook-to-cleanish-html.html" rel="alternate" type="text/html" title="Jupyter Notebook to clean(ish) HTML" /><published>2019-10-17T00:12:05+00:00</published><updated>2019-10-17T00:12:05+00:00</updated><id>https://marksimpson82.github.io/blog/2019/10/17/jupyter-notebook-to-cleanish-html</id><content type="html" xml:base="https://marksimpson82.github.io/blog/2019/10/17/jupyter-notebook-to-cleanish-html.html">&lt;p&gt;I recently polled &lt;a href=&quot;https://reddit.com/r/competitiveoverwatch&quot;&gt;/r/competitiveoverwatch&lt;/a&gt; (aka /r/cow) users for their thoughts on &lt;a href=&quot;https://playoverwatch.com/en-gb/&quot;&gt;Overwatch&lt;/a&gt; with regards to fun and balance. It was well-received on reddit, so I thought I’d do a quick write-up on the pros &amp;amp; cons of using this approach.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://defragdev.com/overwatch_surveys/2019_09/&quot;&gt;read the survey&lt;/a&gt; and also check out the &lt;a href=&quot;https://github.com/marksimpson82/overwatch_survey&quot;&gt;code on github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The survey was created with &lt;a href=&quot;https://www.google.com/forms/about/&quot;&gt;Google Forms&lt;/a&gt;, which produces a raw results &lt;a href=&quot;https://www.google.com/sheets/about/&quot;&gt;Google Sheets&lt;/a&gt; spreadsheet. To analyse the data and generate the graphs, I used &lt;a href=&quot;https://pandas.pydata.org/&quot;&gt;pandas&lt;/a&gt; and &lt;a href=&quot;https://seaborn.pydata.org/&quot;&gt;seaborn&lt;/a&gt; in conjunction with &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jypyter Notebook&lt;/a&gt;, along with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to generate fairly clean HTML &amp;amp; CSS.&lt;/p&gt;

&lt;p&gt;Most of the pertinent commands are in one place: &lt;a href=&quot;https://github.com/marksimpson82/overwatch_survey/blob/master/run_all.sh&quot;&gt;run_all.sh&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-1-create-the-google-forms-survey&quot;&gt;Step 1: Create the Google Forms survey&lt;/h3&gt;

&lt;p&gt;This was the most tedious part. While Google Forms is flexible, it also feels fairly clunky. On top of the general questions, I had to create 3 sets of questions per each Overwatch hero alongside the hero’s image:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Are they fun to play as?&lt;/li&gt;
  &lt;li&gt;Are they fun to play against?&lt;/li&gt;
  &lt;li&gt;Are they balanced?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If there was an easy way of exporting a survey’s raw source (maybe JSON or XML), generating additional templated questions via a script and then re-importing it, I couldn’t see it.&lt;/p&gt;

&lt;p&gt;Instead, I created a self-contained Google Form that had the image &amp;amp; the three questions. I then imported this into the parent form, renamed the fields and updated the image… for … all … 31 … heroes.&lt;/p&gt;

&lt;p&gt;It was boring, but only took an hour of grunt work.&lt;/p&gt;

&lt;h3 id=&quot;step-2-export-the-responses-from-google-sheets&quot;&gt;Step 2: Export the responses from Google Sheets&lt;/h3&gt;

&lt;p&gt;After running the survey, I had a great response: 1200 players took the time to answer it.&lt;/p&gt;

&lt;p&gt;Each Google Form has an associated Google Sheets results sheet. It’s simple to export to CSV.&lt;/p&gt;

&lt;h3 id=&quot;step-3-create-a-more-queryable-data-format&quot;&gt;Step 3: Create a more queryable data format&lt;/h3&gt;

&lt;p&gt;The original results .csv is a flat spreadsheet with 90+ uniquely-named columns like, “&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;I enjoy playing against Ashe&amp;quot;}&quot;&gt;I enjoy playing against Ashe&lt;/span&gt;”, and a rating between 1.0 &amp;amp; 5.0. This is pretty horrible for querying results, so I transformed the data into a more database-esque format: a single general responses table with a primary key, plus a hero responses table with a foreign key, hero name, response type [“playing_as”, “playing_against”, “balance” and “value”].&lt;/p&gt;

&lt;p&gt;This is the sort of quick hackery that is a &lt;a href=&quot;https://github.com/marksimpson82/overwatch_survey/blob/master/overwatch_survey/split_into_tables.py&quot;&gt;joy to do&lt;/a&gt; in Python.&lt;/p&gt;

&lt;h3 id=&quot;step-4-create-the-notebook&quot;&gt;Step 4: Create the notebook&lt;/h3&gt;

&lt;p&gt;Not much to say here. Pandas &amp;amp; Seaborn takes a bit of getting used to and there were a few transformations that I couldn’t figure out using idiomatic Pandas code, but the development process was fairly painless.&lt;/p&gt;

&lt;p&gt;I will say that there’s a few practices that I found useful, though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Avoid file-scoped operations. I tended to wrap my data crunching &amp;amp; graphing operations in functions, and avoided mutating data as much as possible.&lt;/li&gt;
  &lt;li&gt;Avoid using file-scoped variables as much as possible (it’s easy to rely on or mutate something that will have side-effects).&lt;/li&gt;
  &lt;li&gt;Get in the habit of clearing all output &amp;amp; running all notebook cells.&lt;/li&gt;
  &lt;li&gt;If you’re writing something that is useful to a reader, put it in a Markdown cell.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I were creating a larger project with Notebook, I’d probably start making python modules &amp;amp; calling into them rather than spamming them into the main Notebook page. I.e. don’t fall into the trap of treating Notebook files significantly differently to the usual way of writing Python code.&lt;/p&gt;

&lt;h3 id=&quot;step-5-strip-unwanted-elements&quot;&gt;Step 5: Strip unwanted elements&lt;/h3&gt;

&lt;p&gt;I didn’t want to have the code front and centre, as the survey results were not intended for a technical audience - the Python would just get in the way. I tried writing a template for nbconvert to strip out the Python code, but couldn’t get it working. Instead, I just wrote a quick ‘n’ dirty Python regex.&lt;/p&gt;

&lt;h3 id=&quot;step-6-use-nbconvert--to-markdown&quot;&gt;Step 6: Use nbconvert -to markdown&lt;/h3&gt;

&lt;p&gt;Why Markdown? Well, I tried nbconvert -to html. While the results look pretty good at a glance, it generates a page with bloated, inline CSS (hundreds and hundreds of lines) along with base64-encoded images that are directly embedded in the HTML.&lt;/p&gt;

&lt;p&gt;While this is great for a drag ‘n’ drop experience and for sharing intermediate results (there’s no worrying about forgetting to include assets), it’s not something I would be comfortable serving from my website.&lt;/p&gt;

&lt;p&gt;The generated HTML was ~750KB, whereas a markdown variant came in under 270KB!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter nbconvert &lt;span class=&quot;nt&quot;&gt;--to&lt;/span&gt; markdown &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  overwatch_survey/analysis.ipynb &lt;span class=&quot;nt&quot;&gt;--output-dir&lt;/span&gt; static_site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK, so we have fairly clean Markdown, but now what?&lt;/p&gt;

&lt;h3 id=&quot;step-7-use-jekyll-to-generate-html&quot;&gt;Step 7: Use Jekyll to generate HTML&lt;/h3&gt;

&lt;p&gt;Doing any kind of webdev install on Windows is a pain, but … oh well. Jekyll is a solid choice and it works well. It also generates much better HTML for my purposes than nbconvert.&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;static_site &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s all I have to say about that.&lt;/p&gt;</content><author><name>Mark Simpson</name></author><category term="dataviz" /><category term="jekyll" /><category term="jupyter notebook" /><category term="notebook" /><category term="overwatch" /><category term="pandas" /><category term="reddit" /><category term="seaborn" /><summary type="html">I recently polled /r/competitiveoverwatch (aka /r/cow) users for their thoughts on Overwatch with regards to fun and balance. It was well-received on reddit, so I thought I’d do a quick write-up on the pros &amp;amp; cons of using this approach.</summary></entry><entry><title type="html">MS Wheel Mouse Optical Redux (August 2018)</title><link href="https://marksimpson82.github.io/blog/2018/08/22/ms-wheel-mouse-optical-redux-august-2018.html" rel="alternate" type="text/html" title="MS Wheel Mouse Optical Redux (August 2018)" /><published>2018-08-22T16:46:54+00:00</published><updated>2018-08-22T16:46:54+00:00</updated><id>https://marksimpson82.github.io/blog/2018/08/22/ms-wheel-mouse-optical-redux-august-2018</id><content type="html" xml:base="https://marksimpson82.github.io/blog/2018/08/22/ms-wheel-mouse-optical-redux-august-2018.html">&lt;p&gt;Back on the WMO train again. I was using Sweetlow’s signed driver, but it stopped working again, probably due to 
Windows updates. You can find the old guide
&lt;a href=&quot;/blog/2017/05/12/ms-wheel-mouse-optical-redux-wmo-1-1-windows-10-x64.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m on Windows 10 Home 64-bit, version 1803. Here’s how to get it working at the time of writing.&lt;/p&gt;

&lt;p&gt;The main google result is not the actual official Sweetlow post. It links to a thread on the overclock.net forums that was not made by Sweetlow. Instead, follow the instructions on Sweetlow’s official (and up to date!) &lt;a href=&quot;https://www.overclock.net/forum/375-mice/1589644-usb-mouse-hard-overclocking-2000-hz.html&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, the ‘vanilla’ signed driver no longer works for me, but I would recommend trying the main instructions first.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I had to use a workaround that is covered in his post. Specifically, the part where he says:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;If you have EHCI (USB2.0) Controller only on version x64 1703+ or any controller on version 1803+ use these drivers and (Test Mode or atsiv method with non Test Mode)&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I haven’t had any luck with the atsiv method, but the test mode suggestion worked (after a bit of fumbling around).&lt;/p&gt;

&lt;p&gt;Here are explicit steps on how to do this workaround. As ever, I will caveat this by saying it may not work for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backup your files&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Backup the following files:
    &lt;ul&gt;
      &lt;li&gt;%systemroot%\system32\drivers\usbport.sys&lt;/li&gt;
      &lt;li&gt;%systemroot%\system32\drivers\usbxhci.sys&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Enable test mode to allow unsigned drivers&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open a cmd prompt with admin privileges and type the following commands
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bcdedit -set loadoptions DISABLE_INTEGRITY_CHECKS&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bcdedit -set TESTSIGNING ON&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Reboot&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Finally, install the driver&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We’re going to download the official Sweetlow package (which contains the installer and versions of the driver) and replace the official driver with a patched version. We will then use the official installer to install a patched driver.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download &amp;amp; unzip &lt;a href=&quot;https://www.overclock.net/attachments/45829&quot; rel=&quot;nofollow&quot;&gt;https://www.overclock.net/attachments/45829&lt;/a&gt; (you need an overclock.net account to do this) to a directory called “official”&lt;/li&gt;
  &lt;li&gt;Download &amp;amp; unzip &lt;a href=&quot;https://github.com/LordOfMice/hidusbf/blob/master/hidusbfn.zip&quot; rel=&quot;nofollow&quot;&gt;https://github.com/LordOfMice/hidusbf/blob/master/hidusbfn.zip&lt;/a&gt; to a temp directory called “patch”&lt;/li&gt;
  &lt;li&gt;Navigate to “patch”&lt;/li&gt;
  &lt;li&gt;Copy the DRIVER\AMD64\1khz\hidusbf.sys file&lt;/li&gt;
  &lt;li&gt;Navigate to “official”&lt;/li&gt;
  &lt;li&gt;Replace its DRIVER\AMD64\hidusbf.sys + DRIVER\AMD64\1khz\hidusbf.sys with it (I suspect the installer uses the first of these, but I haven’t checked for sure, so replace both)&lt;/li&gt;
  &lt;li&gt;Still in “official”, run setup.exe&lt;/li&gt;
  &lt;li&gt;Check the “Filter On Device” box&lt;/li&gt;
  &lt;li&gt;Change the rate to 1000hz&lt;/li&gt;
  &lt;li&gt;Click the “Install Service” button&lt;/li&gt;
  &lt;li&gt;Click the “Restart” button&lt;/li&gt;
  &lt;li&gt;Close setup.exe&lt;/li&gt;
  &lt;li&gt;Open mouserate.exe (or browse to &lt;a href=&quot;https://zowie.benq.com/en-eu/support/mouse-rate-checker.html&quot; rel=&quot;nofollow&quot;&gt;https://zowie.benq.com/en-eu/support/mouse-rate-checker.html&lt;/a&gt;) and check your hz&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If that didn’t work, reboot. If you mess it up and your mouse stops working, simply go to device manager, uninstall the WMO via remove device, then unplug it before plugging it back in. You’re then OK to try again.&lt;/p&gt;</content><author><name>Mark Simpson</name></author><category term="driver" /><category term="games" /><category term="hardware" /><category term="mouse" /><category term="sweetlow" /><category term="tips" /><category term="windows" /><category term="WMO" /><summary type="html">Back on the WMO train again. I was using Sweetlow’s signed driver, but it stopped working again, probably due to Windows updates. You can find the old guide here.</summary></entry><entry><title type="html">Focused commits (also: git add -p)</title><link href="https://marksimpson82.github.io/blog/2018/04/06/focused-commits-also-git-add-p.html" rel="alternate" type="text/html" title="Focused commits (also: git add -p)" /><published>2018-04-06T00:10:28+00:00</published><updated>2018-04-06T00:10:28+00:00</updated><id>https://marksimpson82.github.io/blog/2018/04/06/focused-commits-also-git-add-p</id><content type="html" xml:base="https://marksimpson82.github.io/blog/2018/04/06/focused-commits-also-git-add-p.html">&lt;p&gt;Many people use version control as a bucket for their stuff. They commit and merge in some shape or form, and it gets shared with their colleagues. Everyone moves on with their lives. Fire &amp;amp; forget sucks when using distributed version control systems.&lt;/p&gt;

&lt;p&gt;The trouble with this approach is that it gets complicated to track two simple things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When was a change introduced?&lt;/li&gt;
  &lt;li&gt;What is the purpose of the change?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How do we use git in a way that makes it easy to track both &lt;em&gt;when&lt;/em&gt; a change was introduced, and the &lt;em&gt;intent&lt;/em&gt; of the change?&lt;/p&gt;

&lt;h2 id=&quot;the-when&quot;&gt;The when&lt;/h2&gt;

&lt;p&gt;The first point (the what) has been written about a lot. The gist of the workflow I use is that constantly rebasing when pulling, and squashing any merges on their way back to master helps a great deal.&lt;/p&gt;

&lt;p&gt;I.e. when you’re working on a feature branch and have local commits that haven’t been pushed, use the following to avoid noisy merge commits:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull origin mybranch --rebase&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To keep your own (non-shared) branch up to date with master, but without creating merge commits, periodically do something like:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git pull origin master
git checkout mybranch
git rebase master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Small tip: if you are pushing your own personal branch after rebasing, you can be sure not to nuke anything important by employing &lt;a href=&quot;https://developer.atlassian.com/blog/2015/04/force-with-lease/&quot;&gt;git push -force-with-lease&lt;/a&gt; rather than git push -force).&lt;/p&gt;

&lt;p&gt;Then when you’re ready to merge back to master:``&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout master
git merge mybranch &lt;span class=&quot;nt&quot;&gt;--squash&lt;/span&gt;
git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are many advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It keeps the history linear&lt;/li&gt;
  &lt;li&gt;There’s no merge noise&lt;/li&gt;
  &lt;li&gt;It groups related commits&lt;/li&gt;
  &lt;li&gt;Reverting a feature merge is easy (i.e. you can just revert the squashed merge)&lt;/li&gt;
  &lt;li&gt;The default commit message will contain the hashes for all squashed commits, so fine-grained operations &amp;amp; the intent for all of these changes are still there.&lt;/li&gt;
  &lt;li&gt;… and arguably best of all, you can trivially figure out which commits introduced bugs when QA says, “hey, CI build 1923’s frob widget is misbehaving” (when commits are interleaved from a long-running branch, the offending commit may actually show up in the history as being months old).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only time I deviate from this pattern is when I’m suffering a lot of merge pain - standard rebasing means merging up your &lt;em&gt;individual&lt;/em&gt; commits, so it can mean a lot of repeated work needs to be done in areas where merge conflicts frequently occur. You can interactively rebase &amp;amp; squash your branch’s commits to reduce the number of commits that require merging or use &lt;a href=&quot;https://git-scm.com/docs/git-rerere&quot;&gt;git rerere&lt;/a&gt;, but it’s fairly complicated vs. the usual workflow.&lt;/p&gt;

&lt;h2 id=&quot;the-why&quot;&gt;The why&lt;/h2&gt;

&lt;p&gt;OK, so that’s the when taken care of. What about the &lt;em&gt;intent&lt;/em&gt; behind the code, or a particular commit? This one’s even easier to solve, it just requires some better commit discipline.&lt;/p&gt;

&lt;h4 id=&quot;committing-a-crime&quot;&gt;Committing a crime&lt;/h4&gt;

&lt;p&gt;Here’s a quick scenario: A developer, Eddie, has been tasked with improving the performance of an application. Eddie profiles the code and figures out some areas they think need improvements. They make the changes, profile the app and find it’s now 20% faster. Great! Oh, and they also reformatted some source files, made a number of variable names compliant with the company’s coding standards, upversioned a header-only library, refactored some code_and_ added a few missing pieces of dev functionality that made the app easier to work with for profiling.&lt;/p&gt;

&lt;p&gt;All told, 45 files have been touched, and 5000 lines of code changed (mainly due to the formatting and library churn). All of these changes are made in one commit, with the a message saying “improving performance of app”.&lt;/p&gt;

&lt;p&gt;Four months later, a few bugs are discovered in a seemingly unrelated area of the app, and are traced back to this commit. Another programmer, Irene, is tasked with fixing it.&lt;/p&gt;

&lt;h4 id=&quot;playing-detective&quot;&gt;Playing detective&lt;/h4&gt;

&lt;p&gt;Irene loads up the offending commit on github, and immediately gets irked when she spots the “change too large to display” message. At this point, Irene’s day is much worse than it should’ve been.&lt;/p&gt;

&lt;p&gt;Was it the formatting changes? I mean, it’s unlikely, but sometimes people make changes by hand and fat-finger a key or transpose something important. The simplest changes can be the most dangerous (think of the number of [ya, yb, yc, xw] errors static analysis tools find…)&lt;/p&gt;

&lt;p&gt;Was it the refactoring? It touched a lot of files. Hard to say without reading the code or just reverting them, then re-applying the other changes.&lt;/p&gt;

&lt;p&gt;Was it the library upgrade? Again, hard to say. Even if it is, the commit message didn’t say if the new version was added for performance reasons, so perhaps Irene will need to re-profile the app to be sure.&lt;/p&gt;

&lt;p&gt;Was it the new functionality? … and so on. It’s really annoying.&lt;/p&gt;

&lt;h4 id=&quot;better-commits&quot;&gt;Better commit(s)&lt;/h4&gt;

&lt;p&gt;VCS commits are like code - written once and read thousands of times later (especially in complicated, high-traffic areas of code). They can be precise and explain the background behind the change, or they can be unfocused while burying the reason for making the change in the first place.&lt;/p&gt;

&lt;p&gt;While we’re all busy (yes, I make numerous lapses of judgement, too…), there are simple ways you can try to be a good citizen.&lt;/p&gt;

&lt;p&gt;Firstly, make your commits as concise as possible. If fixing a bug requires changing precisely two lines, then please change those lines, &lt;em&gt;but nothing more.&lt;/em&gt; If your bugfix isn’t resolving all instances of the problem, the next programmer that picks it up has two lines to start pondering. Two! Not 5000. Huge difference.&lt;/p&gt;

&lt;p&gt;Secondly, make your commit messages as thoughtful as possible. By this I mean “how can I make the reader understand the change I’ve just made, as well as the context?” There are numerous things to talk about. Off the top of my head:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why is the change being made?&lt;/li&gt;
  &lt;li&gt;How does it work?&lt;/li&gt;
  &lt;li&gt;If it’s a complicated change, can you describe the program’s state and how this change helps?&lt;/li&gt;
  &lt;li&gt;Are there any caveats?&lt;/li&gt;
  &lt;li&gt;Where did the solution come from, is there any prior art?&lt;/li&gt;
  &lt;li&gt;Why solve it in this particular way when &lt;other way=&quot;&quot;&gt; seems more appropriate?&lt;/other&gt;&lt;/li&gt;
  &lt;li&gt;Is anything else suffering from the same problem?&lt;/li&gt;
  &lt;li&gt;Is it a hack that needs to be properly fixed in future?&lt;/li&gt;
  &lt;li&gt;Can the change be reverted when library X we’re using ships a fix instead?&lt;/li&gt;
  &lt;li&gt;Are there any bug numbers or related commits worth referencing?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thirdly, as an addendum to #1: do not include orthogonal changes in a single commit! If you want to change the formatting of a file please do so, but not while also changing its functionality, fixing a bug and adding a feature. Do one, then the others later.&lt;/p&gt;

&lt;h4 id=&quot;git-add--p&quot;&gt;git add -p&lt;/h4&gt;

&lt;p&gt;If you find yourself noodling away like I do (“ooh, I’ll just refactor this while I’m here”), it’s easy to find yourself in a situation where you want to make a focused bugfix commit, but the file also has unrelated formatting changes. With a bit of practice, you can use git add -p. The patch (-p) flag allows you to recursively split the file, then stage sections of it. You can then pick and choose which parts to stage &amp;amp; commit! Great.&lt;/p&gt;

&lt;p&gt;Certain IDEs also have VCS integration where you can select the hunks to stage, too.&lt;/p&gt;

&lt;p&gt;Nothing’s ever free, so when using patch mode, take care that your changes don’t mix &amp;amp; match too much, or you may accidentally take part of change A and roll it in with change B (e.g. you renamed a variable, and failed to notice it crept into a prior commit).&lt;/p&gt;

&lt;p&gt;If you’re making large changes, it’s better to just do the work later.&lt;/p&gt;</content><author><name>Mark Simpson</name></author><category term="git" /><category term="tips" /><category term="vcs" /><summary type="html">Many people use version control as a bucket for their stuff. They commit and merge in some shape or form, and it gets shared with their colleagues. Everyone moves on with their lives. Fire &amp;amp; forget sucks when using distributed version control systems.</summary></entry><entry><title type="html">MS Wheel Mouse Optical Redux (WMO 1.1 &amp;amp; Windows 10 x64)</title><link href="https://marksimpson82.github.io/blog/2017/05/12/ms-wheel-mouse-optical-redux-wmo-1-1-windows-10-x64.html" rel="alternate" type="text/html" title="MS Wheel Mouse Optical Redux (WMO 1.1 &amp;amp; Windows 10 x64)" /><published>2017-05-12T01:14:20+00:00</published><updated>2017-05-12T01:14:20+00:00</updated><id>https://marksimpson82.github.io/blog/2017/05/12/ms-wheel-mouse-optical-redux-wmo-1-1-windows-10-x64</id><content type="html" xml:base="https://marksimpson82.github.io/blog/2017/05/12/ms-wheel-mouse-optical-redux-wmo-1-1-windows-10-x64.html">&lt;p&gt;Back in 2011, I wrote a 
&lt;a href=&quot;/blog/2011/07/15/ms-wheel-mouse-optical-wmo-1-1.html&quot;&gt;fairly gushing post&lt;/a&gt; about the Microsoft WMO 1.1/1.1a. 
It’s a great mouse. It really is.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin: 10px 0px;&quot; src=&quot;https://defragdev.com/blog/images/2011/07/image1.png&quot; width=&quot;240&quot; height=&quot;240&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-end-of-my-wmo&quot;&gt;The end of my WMO&lt;/h2&gt;

&lt;p&gt;Sadly, in late 2016, the venerable WMO gave up the ghost – its death certificate listed a faulty cable. Basically, I’d be playing Overwatch and it’d randomly disconnect, then reconnect. I’m not a technician, so I binned it.&lt;/p&gt;

&lt;p&gt;I then bought a Steelseries Rival 100, as I needed a stopgap mouse. The Rival 100 is a decent mouse, but its shape doesn’t agree with me (it’s too narrow), and it’s a touch too heavy for my tastes.&lt;/p&gt;

&lt;h2 id=&quot;finding-a-replacement-mouse-model&quot;&gt;Finding a replacement mouse model&lt;/h2&gt;

&lt;p&gt;I decided to try and track down a decent WMO replacement. After a bit of a hunt, I couldn’t find anything that’s 100% suitable; some people recommend Zowies like the EC2-A or FK1, and others like the Razer DeathAdder Chroma.&lt;/p&gt;

&lt;p&gt;It’s tough to track down accurate information regarding the unpackaged weight of the mouse, too. The WMO weighed in at ~80g, and in my opinion is better for it.&lt;/p&gt;

&lt;p&gt;Furthermore, I don’t want a mouse with stupid cloud software (S3 is down? Well, not sure how to load your mouse settings man!), and I’m not really a fan of spending £60 on a mouse in what is essentially a blind purchase. I might love it, but I might hate it.&lt;/p&gt;

&lt;p&gt;If you can walk into a decently-sized PC store and try out a load of mice, I’d recommend just forgetting about the WMO and finding something new.&lt;/p&gt;

&lt;h2 id=&quot;however-if-youre-stubborn&quot;&gt;However, if you’re stubborn…&lt;/h2&gt;

&lt;p&gt;In the end, I decided to buy another WMO. They’ve long since been discontinued, so the main options nowadays are ebay and second-hand sites.&lt;/p&gt;

&lt;p&gt;Personally, I bought some refurbished ones, plus a new one that was still in its (rather worn) box – it’d been sat on a shelf for 10 years, ha! I’d recommend going this route – there’s plenty of obscure product numbers &amp;amp; sites listing good/bad sensors, so you can do a bit of googling based on the seller’s pictures. It’s not an exact science, but the mice tend to be so cheap that it doesn’t matter if you buy a dud or two. My total outlay was about £25 for 3 mice. The two I’ve tested have the same product number of X802382. Both work fine.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&quot;http://www.ebay.com/itm/Microsoft-Wheel-Mouse-Optical-WMO-Steelseries-MOD-100-NEW-5-Colors-/121179666270?pt=LH_DefaultDomain_0&amp;amp;var=&amp;amp;hash=item61d44f5bbb&amp;amp;rmvSB=true&quot;&gt;modded WMOs&lt;/a&gt; from a specific seller on ebay are available, and the seller has a good reputation, so he’s perhaps worth a look.&lt;/p&gt;

&lt;h2 id=&quot;overclocking--harder-than-it-used-to-be&quot;&gt;Overclocking – harder than it used to be&lt;/h2&gt;

&lt;p&gt;I briefly touched on this in my previous post from 2011: if you don’t overclock the polling rate, the mouse performs worse. Depending on your sensitivity settings, this can be a deal-breaker and render it unusable.&lt;/p&gt;

&lt;p&gt;The tl;dr here is that the WMO (and its stablemates) offers “perfect control” to a speed up to 1m/s, but exhibits negative acceleration beyond this speed &lt;em&gt;&lt;a href=&quot;http://www.overclock.net/t/1597441/digitally-signed-sweetlow-1000hz-mouse-driver&quot;&gt;unless you overclock the mouse polling rate&lt;/a&gt;&lt;/em&gt;. I won’t warble on about the nuts and bolts of this too much, as there’s a great &lt;a href=&quot;http://www.esreality.com/?a=longpost&amp;amp;id=1265679&amp;amp;page=4&quot;&gt;esreality article&lt;/a&gt; about it that explains it better than I can.&lt;/p&gt;

&lt;p&gt;What I will say is that, if you’re a high sensitivity gamer and don’t fling the mouse around a lot, this may not be a significant issue. However, I play Overwatch with an eDPI of 3.1k (450 CPI * 7 sensitivity) which equates to roughly 43 cm for a 360. This is on the lower sensitivity side of things for OW. Hitting a 180 means travelling ~20cm across the pad. Unfortunately, I &lt;em&gt;easily&lt;/em&gt; hit the negative acceleration threshold @ 125hz, and my 180 degree turn looks more like a 100 degree bout of confusion.&lt;/p&gt;

&lt;p&gt;I’d had overclocking working with Windows 10 x64 previously using an unsigned driver in test mode, but for whatever reason, I just couldn’t get it to hit better than 125hz using &lt;a href=&quot;http://www.overclock.net/t/1597441/digitally-signed-sweetlow-1000hz-mouse-driver&quot;&gt;Sweetlow’s new signed driver&lt;/a&gt;. It would downclock OK (so I could run it at 30hz), so I just assumed I’d got a dud mouse since it wouldn’t go past the default settings. This was not the case.&lt;/p&gt;

&lt;h2 id=&quot;the-state-of-play-with-the-community-created-driver&quot;&gt;The state of play with the community-created driver&lt;/h2&gt;

&lt;p&gt;The guy that wrote the driver has showed a lot of ingenuity, and the community came together to raise the funds to sign the driver. The downside is that since it’s niche bit of kit, so getting help relies on a handful of folk. The readme is a little confusing and you have to download the files from a forum’s attachments and/or work your way through multiple broken links (sorry, not going to take point here as these files change frequently).&lt;/p&gt;

&lt;p&gt;There’s also a huge thread full of “HLAP! It won’t work!” posts, and I don’t think there’s an FAQ, so you have to sift through 50+ page threads full of information that is usually not terribly relevant to your particular issue. I had almost given up when I managed to get it working!&lt;/p&gt;

&lt;p&gt;So here’s the current state of affairs (May 2017):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A signed driver exists which means you shouldn’t need to install an unsigned driver (this is good!)&lt;/li&gt;
  &lt;li&gt;Its certificate (which must be renewed yearly, I believe) expired or is about to expire (this is bad!)&lt;/li&gt;
  &lt;li&gt;A recent Windows 10 Content Creators update broke the signed driver on Windows 10 x64 (this is also bad!)&lt;/li&gt;
  &lt;li&gt;It will &lt;em&gt;probably&lt;/em&gt; work for you &lt;em&gt;unless&lt;/em&gt; you’re on Windows 10 x64 with the latest updates.&lt;/li&gt;
  &lt;li&gt;Various USB issues exist (haven’t personally run into this, but there’s lots of chat about disabling secure boot, xHCI and various other bits of hand-waving going on).&lt;/li&gt;
  &lt;li&gt;There’s also an alternative overclock which involves USB 3.0, but I’ve not touched that one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sweetlow is doing a great job considering it’s just a side hobby for him, and he’s helping a lot of people. I thought I could help by detailing my problem &amp;amp; solution here.&lt;/p&gt;

&lt;h2 id=&quot;may-2017-windows-10-x64&quot;&gt;May 2017, Windows 10 x64&lt;/h2&gt;

&lt;p&gt;I will preface this by saying it’s not a great solution. An unsigned driver is involved, just like olden times. Sweetlow has said he’ll roll these fixes into the new signed driver. In the meantime, here’s how I got it working.&lt;/p&gt;

&lt;p&gt;Note that this involves running windows with some system settings changed. Unless you’re comfortable with this, don’t do it.&lt;/p&gt;

&lt;p&gt;I’ve also heard rumblings about some games viewing this as dodgy (from an anti-cheat perspective), but haven’t confirmed it. I ran all games for years with exactly the same method without issue.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Backup the following files:
    &lt;ul&gt;
      &lt;li&gt;%systemroot%\system32\drivers\usbport.sys&lt;/li&gt;
      &lt;li&gt;%systemroot%\system32\drivers\usbxhci.sys&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create an account on overclock.net&lt;/li&gt;
  &lt;li&gt;Download the &lt;a href=&quot;http://www.overclock.net/t/1597441/digitally-signed-sweetlow-1000hz-mouse-driver&quot;&gt;signed driver&lt;/a&gt; and unzip it somewhere&lt;/li&gt;
  &lt;li&gt;Download the updated (non-signed) hidusbf.sys file from &lt;a href=&quot;http://www.overclock.net/t/1597441/digitally-signed-sweetlow-1000hz-mouse-driver/480#post_25977633&quot;&gt;this post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Replace the hidusbf.sys in the signed driver directory (DRIVER/AMD64/hidusbf.sys) with the one you just grabbed&lt;/li&gt;
  &lt;li&gt;Open a cmd prompt with admin privileges and type the following commands
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bcdedit -set loadoptions DISABLE_INTEGRITY_CHECKS&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bcdedit -set TESTSIGNING ON&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot&lt;/li&gt;
  &lt;li&gt;Browse to the signed driver directory&lt;/li&gt;
  &lt;li&gt;Right click HIDUSBF.INF and choose “install”&lt;/li&gt;
  &lt;li&gt;Run Setup.exe&lt;/li&gt;
  &lt;li&gt;Check the “filter” box&lt;/li&gt;
  &lt;li&gt;Set the polling rate to 1000hz or whatever you want&lt;/li&gt;
  &lt;li&gt;Click “install service”&lt;/li&gt;
  &lt;li&gt;Click “restart” (the button in the setup.exe, not restart your PC!)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zowie.benq.com/en/support/mouse-rate-checker.html&quot;&gt;Check your mouserate&lt;/a&gt; – it should be north of 125hz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to sweetlow and co for this bit of magic.&lt;/p&gt;

&lt;h2 id=&quot;result-1000hz&quot;&gt;Result: 1000hz&lt;/h2&gt;

&lt;p&gt;My WMO is running at 1000hz again, and the perfect control speed is noticeably improved; it is now ~1.5m/s, which is more difficult to hit at my sensitivity, but certainly possible. If I really whip the mouse into a 180, the uneven turning is still evident, though much less pronounced. I’ll see how badly this affects my game and either persevere, or get a new mouse.&lt;/p&gt;

&lt;p&gt;The WMO has its flaws and isn’t appropriate for everyone. If you play with a similar or even lower sensitivity than me, I would recommend looking into a more modern mouse, as the WMO won’t keep up. &lt;a href=&quot;https://www.youtube.com/watch?v=74X-irNEK1M&quot;&gt;Ryujehong’s 70+cm/360&lt;/a&gt; would certainly not agree with the WMO!&lt;/p&gt;

&lt;h2 id=&quot;addendum-stripping-the-mouse-cable&quot;&gt;Addendum: Stripping the mouse cable&lt;/h2&gt;

&lt;p&gt;The WMO mouse cable really sucks. It’s extremely stiff and doesn’t straighten out easily; this results in snagging and uneven resistance as you move the mouse around, causing the cable to bend and coil. To remedy this, you can strip the outer cable sheath – just (carefully) run a sharp knife around the circumference of the cable, then strip the sheath by gently tugging on it. There is a copper inner sheath, so it should be fine.&lt;/p&gt;

&lt;p&gt;You don’t need to strip the entire cable, just a section of it close to the mouse body. I made a cut about an inch from the mouse body, then another half a metre up the cable. I then tugged at the sheath and removed the section. Result: the mouse cable is much more pliable. Can’t really say whether this will affect its durability, but I did this on a £6 second-hander, so I don’t really care too much.&lt;/p&gt;

&lt;h2 id=&quot;post-amble-i-bought-a-logitech-g403-and-love-it&quot;&gt;Post-amble: I bought a Logitech G403 and love it&lt;/h2&gt;

&lt;p&gt;I played with the WMO for a week or so; the negative acceleration coupled with my low sensitivity renders it unsuitable. I decided to try something new.&lt;/p&gt;

&lt;p&gt;So what to do?. &lt;a href=&quot;http://www.rocketjumpninja.com/top-40/&quot;&gt;Rocketjumpninja’s website&lt;/a&gt; has some great mouse review articles &amp;amp; youtube links, including detailed size comparisons / side-by-side videos of various popular mice.&lt;/p&gt;

&lt;p&gt;Given that my hands are fairly long (22cm or so) and I palm grip when gaming, I thought the Zowie EC1-A or the Razer DeathAdder would be good. However, I tried the Zowie EC1-A and it didn’t suit me. It was a good match for me length-wise and was comfortable to rest my hand on, but it’s too wide for me to pick up without changing the way I grip it.&lt;/p&gt;

&lt;p&gt;If you have massive hams for hands, definitely check out the EC1-A. The sensor is great, and it has a few other wonderful features, namely a DPI switch being on the base of the mouse (“let’s change DPI to go into sniper mode!” said nobody ever, apart from marketing guys) and zero setup / drivers. True plug ‘n’ play.&lt;/p&gt;

&lt;p&gt;After sending it back, I noticed RJN’s videos featured a Logitech G403. The G403 is much larger than the Steelseries Rival 100, and somewhere between the sizes of the EC1-A and the EC2-A. Given that I wanted a larger mouse, but not as big as the EC1-A, the Logitech G403 fitted the bill. It is perfect for my hand size.&lt;/p&gt;

&lt;p&gt;Positives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I like the shape even better than the WMO / EC1-A.&lt;/li&gt;
  &lt;li&gt;It’s light. Not quite as light as the WMO, but within 10g. The extra 10g is not noticeable as…&lt;/li&gt;
  &lt;li&gt;… it glides much better and faster than any other mouse I’ve tried&lt;/li&gt;
  &lt;li&gt;The cable slides over a cloth pad easily and doesn’t twist or snag.&lt;/li&gt;
  &lt;li&gt;The sensor is amazing.&lt;/li&gt;
  &lt;li&gt;The DPI switch cycles between 400 / 800 / 1600 / 3200 DPI without requiring drivers.&lt;/li&gt;
  &lt;li&gt;You don’t need to install any software whatsoever unless you want to customise it (I don’t).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Negatives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s £60, for crying out loud! I managed to get it on sale for £40, but the normal retail price is very steep.&lt;/li&gt;
  &lt;li&gt;The cable is very thick. While its weight is not an issue, it doesn’t fit in most mouse bungees (razer bungee says: nope).&lt;/li&gt;
  &lt;li&gt;The DPI switch is on top of the mouse. It’s hard to press accidentally, but it’s still there. Zowie wins this round.&lt;/li&gt;
  &lt;li&gt;Logitech’s customisation software is a 100+ MB installer. Balls to that! (This is also a major reason I won’t buy razer mice.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m pretty sure that my mouse-buying days are over for another 5 years. What I take from this spate of experimentation is that there is no ‘amazing’ mouse that beats all others. It all depends on your hand size, shape and grip style. Try out some mice and see what suits you rather than buying the “best” mouse with the most positive reviews.&lt;/p&gt;</content><author><name>Mark Simpson</name></author><category term="1000hz" /><category term="games" /><category term="gaming" /><category term="hardware" /><category term="misc" /><category term="mouse" /><category term="overclocking" /><category term="sensitivity" /><category term="tips" /><category term="WMO" /><summary type="html">Back in 2011, I wrote a fairly gushing post about the Microsoft WMO 1.1/1.1a. It’s a great mouse. It really is.</summary></entry><entry><title type="html">Crayon syntax highlighter</title><link href="https://marksimpson82.github.io/blog/2014/08/23/crayon-syntax-highlighter.html" rel="alternate" type="text/html" title="Crayon syntax highlighter" /><published>2014-08-23T22:20:08+00:00</published><updated>2014-08-23T22:20:08+00:00</updated><id>https://marksimpson82.github.io/blog/2014/08/23/crayon-syntax-highlighter</id><content type="html" xml:base="https://marksimpson82.github.io/blog/2014/08/23/crayon-syntax-highlighter.html">&lt;p&gt;I’ve tried to install a couple of different syntax highlighters in the past and was thoroughly unimpressed. They either failed to install cleanly, didn’t work or had numerous issues that rendered them useless.&lt;/p&gt;

&lt;p&gt;Anyway, after manually formatting source code snippets for years, I’m giving Crayon a go. The install was easy and the output looks good. Let’s see how we go :-)&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find it here: &lt;a href=&quot;https://wordpress.org/plugins/crayon-syntax-highlighter/&quot;&gt;https://wordpress.org/plugins/crayon-syntax-highlighter/&lt;/a&gt;&lt;/p&gt;</content><author><name>Mark Simpson</name></author><category term="Uncategorized" /><summary type="html">I’ve tried to install a couple of different syntax highlighters in the past and was thoroughly unimpressed. They either failed to install cleanly, didn’t work or had numerous issues that rendered them useless.</summary></entry><entry><title type="html">The fundamentals of unit testing: draw attention to ‘interesting’ values</title><link href="https://marksimpson82.github.io/blog/2014/08/07/the-fundamentals-of-unit-testing-draw-attention-to-interesting-values.html" rel="alternate" type="text/html" title="The fundamentals of unit testing: draw attention to ‘interesting’ values" /><published>2014-08-07T21:51:25+00:00</published><updated>2014-08-07T21:51:25+00:00</updated><id>https://marksimpson82.github.io/blog/2014/08/07/the-fundamentals-of-unit-testing-draw-attention-to-interesting-values</id><content type="html" xml:base="https://marksimpson82.github.io/blog/2014/08/07/the-fundamentals-of-unit-testing-draw-attention-to-interesting-values.html">&lt;p&gt;This post is &lt;a href=&quot;/blog/2012/10/24/the-fundamentals-of-automated-testing-series.html&quot;&gt;part of a series&lt;/a&gt; on unit testing.&lt;/p&gt;

&lt;p&gt;3 is the magic number? No. No, it’s not.&lt;/p&gt;

&lt;p&gt;Magic numbers/strings/other values in all walks of programming are a readability and maintenance liability. It’s quite common to see all kinds of literals being littered through test code. It’s quite easy to simply switch off and treat test code as a second class citizen.&lt;/p&gt;

&lt;p&gt;To illustrate this point, please tell me what this does&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestInvalidFuelAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
 &lt;span class=&quot;c1&quot;&gt;// Arrange  &lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateLittleCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 

 &lt;span class=&quot;c1&quot;&gt;// Act &amp;amp; Assert  &lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddFuel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s not exactly crystal clear, is it? Although the naming of this test can and should be improved, bear in mind that it’s an extremely simple case (one method call with one argument being passed). Despite this, the intent is still obscured because of a literal.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;Replace_magic_values_with_named_consts&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;replace-literals-with-named-consts&quot;&gt;Replace literals with named consts&lt;/h2&gt;

&lt;p&gt;Let’s change 500 to a named constant. Let’s also change the test name while we’re at it.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;when_the_car_fuel_tank_capacity_is_too_low_and_fuel_is_added_an_exception_is_thrown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
 &lt;span class=&quot;c1&quot;&gt;// Arrange  &lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateLittleCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
 &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LitresOfFuelThatIsTooLargeForTankCapacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

 &lt;span class=&quot;c1&quot;&gt;// Act &amp;amp; Assert  &lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;  
 &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddFuel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LitresOfFuelThatIsTooMuchForTankCapacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that’s much clearer. We can see what the value represents, the units it’s measured in and its place in the test. Some people shit the bed when they see really long story-like variable names in tests, but they’re generally a help, not a hindrance.&lt;/p&gt;

&lt;p&gt;While the previous example is simple, this tip makes much more of a difference in situations where a function/method/constructor has numerous parameters, but the test is largely focused on only one of them. How do you know which one to pay attention to?&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;when_account_balance_is_low_money_transfers_fail_when_would_be_overdrawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
 &lt;span class=&quot;c1&quot;&gt;// Arrange  &lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentAccount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetCurrentAccountWithBalanceInUSD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

 &lt;span class=&quot;c1&quot;&gt;// Act  &lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transferSucceeded&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
   &lt;span class=&quot;n&quot;&gt;currentAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryTransfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;602402&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

 &lt;span class=&quot;c1&quot;&gt;// Assert  &lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transferSucceeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fine, this is a crufty-looking API, but in certain circumstances, it’s quite common to see functions/constructors that take multiple arguments of a similar type. At a glance, how can you tell which of the arguments is the one of interest to the test? Is it 1000, 42 or 602402? What is the significance of any of them? Which one is causing the transfer to fail?&lt;/p&gt;

&lt;p&gt;Let’s use a named const to draw attention to the interesting argument.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;when_account_balance_is_low_money_transfers_fail_when_would_be_overdrawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
 &lt;span class=&quot;c1&quot;&gt;// Arrange  &lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentAccount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetCurrentAccountWithBalanceInUSD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
 &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountInUSDThatWillForceAccountIntoOverdraft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

 &lt;span class=&quot;c1&quot;&gt;// Act  &lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transferSucceeded&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryTransfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;AmountInUSDThatWillForceAccountIntoOverdraft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;602402&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

 &lt;span class=&quot;c1&quot;&gt;// Assert  &lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transferSucceeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Turns out the 42 is the number of cents in the transfer, and that 602402 is just a dummy customer number we’re passing through.&lt;/p&gt;

&lt;p&gt;We can go further than this to clean things up still further by doing things such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Extract a wrapper test method that calls TryTransfer, but only has one parameter: the amount of USD to withdraw (the other parameters can be satisfied with constants). This draws attention to the important part of the test (varying the value of the USD transfer amount) and also helps insulate the tests from changes to the TryTransfer method.&lt;/li&gt;
  &lt;li&gt;In the production code, using types that are more appropriate to reduce ambiguity (e.g. in the case of a customer account number, an AccountCredentials class would be more suitable than an int!)&lt;/li&gt;
  &lt;li&gt;Finally, if lots of things are changed in the tests, but in slightly different ways each time, consider the use of a &lt;a href=&quot;/blog/2009/04/10/the-test-data-builder-pattern-with-c-30.html&quot;&gt;Test Data Builder&lt;/a&gt;. Test data builders are very useful, as the provided defaults are sensible for most cases. As a result, when arranging your test, the only things that are changed in the builder are the things that actually matter. Test data builders can also insulate the tests from breaking changes.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mark Simpson</name></author><category term="fundamentals of unit testing" /><category term="testing" /><category term="tips" /><summary type="html">This post is part of a series on unit testing.</summary></entry></feed>